version: 2.1
orbs:
  prod-aws-ecr: circleci/aws-ecr@8.0.0
executors:
  custom:
    machine:
      image: ubuntu-2004:202111-02
    resource_class: large
jobs:
  restore_and_run_unittests:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - checkout
      - setup_remote_docker: 
         docker_layer_caching: false
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "Appointment.Api.UnitTests/Appointment.Api.UnitTests.csproj" }}
      - run:
          name: "Restore dependencies"
          command: "dotnet restore"
          working_directory: Appointment.Api.UnitTests
      - run:
          name: "Add JUnit"
          working_directory: Appointment.Api.UnitTests
          command: "dotnet add Appointment.Api.UnitTests.csproj package JUnitTestLogger --version 1.1.0"
      - run:
          name: "Create cache folder"
          command: mkdir -p ~/cache
      - run:
          name: "Create tests result folder"
          command: mkdir -p ~/test-result
      - save_cache:
          paths:
            - ~/cache
          key: dotnet-packages-v1-{{ checksum "Appointment.Api.UnitTests/Appointment.Api.UnitTests.csproj" }}
      - run:
          name: "Run tests"
          command: "dotnet test --logger junit;LogFilePath=Appointment.Api.UnitTests/TestResults/results.xml"
          working_directory: Appointment.Api.UnitTests
      - store_test_results:          
          path: Appointment.Api.UnitTests/TestResults
  restore_and_run_integrationtests:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "Appointment.Api.IntegrationTests/Appointment.Api.IntegrationTests.csproj" }}
      - run:
          name: "Restore dependencies"
          command: "dotnet restore"
          working_directory: Appointment.Api.IntegrationTests
      - run:
          name: "Add JUnit"
          working_directory: Appointment.Api.IntegrationTests
          command: "dotnet add Appointment.Api.IntegrationTests.csproj package JUnitTestLogger --version 1.1.0"
      - run:
          name: "Create cache folder"
          command: mkdir -p ~/cache
      - run:
          name: "Create tests result folder"
          command: mkdir -p ~/test-result
      - save_cache:
          paths:
            - ~/cache
          key: dotnet-packages-v1-{{ checksum "Appointment.Api.IntegrationTests/Appointment.Api.IntegrationTests.csproj" }}
      - run:
          name: "Run tests"
          command: "dotnet test --logger junit;LogFilePath=Appointment.Api.IntegrationTests/TestResults/results.xml"
          working_directory: Appointment.Api.IntegrationTests
      - store_test_results:          
          path: Appointment.Api.IntegrationTests/TestResults
  update_database: &update_database
    environment:
      - TERM: xterm
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:7.0
      - image: circleci/openjdk:9-jdk
    steps:
      - checkout
      - setup_remote_docker: 
         docker_layer_caching: false
      - run:
          name: "Installing dotnet EF Core tool"
          # dotnet tool update dotnet-ef --global
          command: dotnet tool install --global dotnet-ef --version 7.0
      - run:
          name: "Exporting Tool environment variable"
          command: echo 'export PATH="$PATH:$HOME/.dotnet/tools/"' >> $BASH_ENV
      - run:
          name: "Export Aspnet environment"
          command: echo 'export ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT' >> $BASH_ENV
      - run:
          name: "Install unizp"
          command: |
            apt update -y
            apt upgrade -y
            apt install -y unzip
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: "Configure AWS Cli"
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_REGION
            aws configure set default.output json 
            aws configure set default.cli_pager ""
      - run:
          name: "Modify DB Instance security group"
          command: |
            aws rds modify-db-instance --db-instance-identifier $AWS_RDS_DATABASE_IDENTIFIER --apply-immediately --no-paginate --vpc-security-group-ids $AWS_CIRCLECI_SG $AWS_DEFAULT_SG --backup-retention-period 0 --output table --region $AWS_REGION &&
            sleep 10
      - run:
          name: "Updating database"
          command: dotnet ef database update --project Appointment.Infra.Data --startup-project Appointment.Api --configuration Migration --verbose
      - run:
          name: "Delete database security group authorization"
          command: |
            aws rds modify-db-instance --db-instance-identifier $AWS_RDS_DATABASE_IDENTIFIER --apply-immediately --no-paginate --vpc-security-group-ids $AWS_DEFAULT_SG --backup-retention-period 0 --output table --region $AWS_REGION
  update-database-prod:
    <<: *update_database
  deploy: &deploy
    docker:
      - image: circleci/openjdk:9-jdk
    steps:
      - checkout
      - setup_remote_docker: 
         docker_layer_caching: false
      - add_ssh_keys:
          fingerprints:
            - "85:03:49:9d:ce:e4:15:b2:18:6a:36:b5:72:53:5c:14"
      - run:
          name: "Install AWS CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Configure AWS Cli"
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_REGION
            aws configure set default.output json 
            aws configure set default.cli_pager ""
      - run:
          name: "Add ingress rule"
          command: | 
            aws ec2 authorize-security-group-ingress --group-id $AWS_DEFAULT_SG --no-paginate --region $AWS_REGION --protocol tcp --port 22 --cidr $(curl ipinfo.io/ip)/24
      - run:
          name: "Sleep 5 seconds to propagate"
          command: "sleep 5"
      - run:
          name: "Get ec2 PublicInstanceName and set into env variable"
          command: | 
            echo "export AWS_EC2_PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $AWS_INSTANCE_ID --no-paginate --region $AWS_REGION --query 'Reservations[].Instances[].PublicDnsName[]' --output text)" >> $BASH_ENV
      - run:
          name: "Copy .sh to EC2"
          command: "scp -o StrictHostKeyChecking=no docker-appointment.sh $AWS_EC2_USERNAME@$AWS_EC2_PUBLIC_DNS:/home/ec2-user"
      - run:
          name: "Changes .sh attributes"
          command: |
            ssh $AWS_EC2_USERNAME@$AWS_EC2_PUBLIC_DNS -o StrictHostKeyChecking=no "sudo chmod +x /home/ec2-user/docker-appointment.sh"
      - run:
          name: "Connect and build"
          command: |
            ssh $AWS_EC2_USERNAME@$AWS_EC2_PUBLIC_DNS -o StrictHostKeyChecking=no "./docker-appointment.sh $AWS_ECR_REPO latest"
      - run:
          name: "Remove ingress rule"
          command: |
            aws ec2 revoke-security-group-ingress --group-id $AWS_DEFAULT_SG --no-paginate --region $AWS_REGION --protocol tcp --port 22 --cidr $(curl ipinfo.io/ip)/24
  deploy-prod:
    <<: *deploy
workflows:
  build-and-push-image:
    jobs:
      - restore_and_run_unittests
      - restore_and_run_integrationtests:
          requires:
            - restore_and_run_unittests
      - prod-aws-ecr/build-and-push-image:
          filters:
            branches:
              only:
                - master
          requires:
            - restore_and_run_integrationtests
          executor: custom
          registry-id: AWS_ACCOUNT_ID
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          path: .
          region: ${AWS_REGION}
          repo: prod-appointment
          tag: 'latest,<<pipeline.number>>'
      - update-database-prod:
          context: appointment-prod-context
          requires:
            - prod-aws-ecr/build-and-push-image
          filters:
            branches:
              only:
                - master
      - deploy-prod:
          context: appointment-prod-context
          requires:
            - update-database-prod
          filters:
            branches:
              only:
                - master
