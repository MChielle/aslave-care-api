// <auto-generated />
using System;
using AslaveCare.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AslaveCare.Infra.Data.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20250505152423_CreateStockType")]
    partial class CreateStockType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AslaveCare.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<decimal>("SplitPercentage")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71c45363-20e5-4f70-be43-3b46452cd7a0"),
                            About = "Dev",
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Disable = false,
                            Name = "Matheus",
                            SplitPercentage = 0m,
                            UserId = new Guid("ef2c54d6-a131-4e5a-b757-e3ebdd67e9bc")
                        });
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71c45363-20e5-4f70-be43-3b46452cd7a0"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Disable = false,
                            Name = "Matheus",
                            UserId = new Guid("ef2c54d6-a131-4e5a-b757-e3ebdd67e9be")
                        });
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Apply")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Donation")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("RegistersIn");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterInStock", b =>
                {
                    b.Property<Guid>("RegisterInId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("RegisterInId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("RegisterInStocks");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterOut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Apply")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ApplyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RegistersOut");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterOutStock", b =>
                {
                    b.Property<Guid>("RegisterOutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("RegisterOutId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("RegisterOutStocks");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e589a9e9-1ba9-46e8-8487-ec68b2f9ef76"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Master",
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("574ac0d0-2e84-44d7-8949-a8169fa3bbff"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Manager",
                            UserType = 0
                        },
                        new
                        {
                            Id = new Guid("a869d27c-b75d-424b-a2d6-c91e273d631b"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Employee",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("StockTypeId")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("stockLowWarning")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("Id");

                    b.HasIndex("StockTypeId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.StockType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("StockTypes");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Disable")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppleUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FireBaseCloudMessageToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("UserValidationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserValidationId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef2c54d6-a131-4e5a-b757-e3ebdd67e9bd"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "matheuschielle+master@gmail.com",
                            FireBaseCloudMessageToken = "ds4Pz40YTeazL39DToMz5P:APA91bHUoBotVr6Mi9d3EfsbgVGrHUdWfmfGslBP2hFboNcdc7MlTQRt2aE2DZTNad-0-ISU3Bk_wON4eLNJZw_pIQ5tH3lPQDJy-4XglcSH5LAufDKmqjy3K0osz7uph6oTknwHpGem",
                            Name = "Matheus",
                            Password = new byte[] { 65, 76, 109, 69, 56, 75, 74, 97, 107, 55, 89, 89, 80, 66, 49, 70, 87, 56, 106, 115, 72, 119, 99, 120, 103, 49, 103, 87, 106, 89, 98, 80, 86, 70, 111, 121, 50, 105, 82, 104, 43, 113, 111, 112, 90, 103, 112, 69, 48, 77, 90, 117, 70, 117, 87, 122, 107, 110, 56, 77, 100, 117, 53, 111, 109, 85, 112, 50, 87, 88, 116, 65, 116, 77, 54, 69, 87, 87, 120, 52, 99, 109, 82, 117, 99, 74, 102, 47, 111, 84, 82, 81, 75, 48, 106, 55, 104, 117, 72, 47, 65, 120, 107, 81, 120, 68, 84, 43, 101, 70, 43, 100, 105, 120, 47, 57, 56, 52, 76, 52, 85, 106, 68, 47, 97, 66, 119, 51, 100, 98, 117, 81, 107, 51, 101, 122, 74, 43, 105, 100, 69, 85, 87, 110, 105, 49, 43, 87, 49, 66, 84, 106, 86, 109, 67, 55, 68, 88, 65, 49, 115, 68, 120, 101, 53, 103, 54, 88, 90, 52, 49, 43, 110, 105, 73, 107, 52, 73, 107, 118, 50, 67, 76, 74, 65, 43, 86, 76, 69, 69, 122, 84, 112, 83, 113, 110, 111, 74, 83, 70, 105, 82, 79, 120, 118, 71, 118, 103, 72, 49, 51, 99, 115, 90, 101, 121, 52, 84, 78, 73, 50, 89, 84, 117, 71, 116, 117, 77, 105, 47, 71, 107, 75, 87, 97, 115, 43, 72, 66, 74, 102, 70, 82, 84, 82, 72, 77, 90, 73, 110, 112, 88, 98, 101, 82, 71, 68, 117, 74, 49, 107, 121, 113, 105, 67, 103, 118, 57, 101, 72, 106, 105, 120, 67, 113, 112, 117, 73, 69, 99, 54, 84, 76, 79, 54, 83, 57, 117, 49, 112, 55, 97, 67, 102, 67, 87, 100, 84, 85, 108, 69, 66, 53, 101, 53, 100, 85, 67, 69, 76, 47, 106, 99, 109, 122, 118, 105, 88, 113, 66, 65, 52, 52, 122, 118, 70, 120, 69, 108, 105, 101, 50, 67, 104, 103, 66, 76, 122, 108, 48, 100, 65, 61, 61 },
                            UserValidationId = new Guid("f9961144-2f1e-41c4-b96c-79e62c20b21b")
                        },
                        new
                        {
                            Id = new Guid("ef2c54d6-a131-4e5a-b757-e3ebdd67e9be"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "matheuschielle+manager@gmail.com",
                            FireBaseCloudMessageToken = "ds4Pz40YTeazL39DToMz5P:APA91bHUoBotVr6Mi9d3EfsbgVGrHUdWfmfGslBP2hFboNcdc7MlTQRt2aE2DZTNad-0-ISU3Bk_wON4eLNJZw_pIQ5tH3lPQDJy-4XglcSH5LAufDKmqjy3K0osz7uph6oTknwHpGem",
                            Name = "Matheus",
                            Password = new byte[] { 65, 76, 109, 69, 56, 75, 74, 97, 107, 55, 89, 89, 80, 66, 49, 70, 87, 56, 106, 115, 72, 119, 99, 120, 103, 49, 103, 87, 106, 89, 98, 80, 86, 70, 111, 121, 50, 105, 82, 104, 43, 113, 111, 112, 90, 103, 112, 69, 48, 77, 90, 117, 70, 117, 87, 122, 107, 110, 56, 77, 100, 117, 53, 111, 109, 85, 112, 50, 87, 88, 116, 65, 116, 77, 54, 69, 87, 87, 120, 52, 99, 109, 82, 117, 99, 74, 102, 47, 111, 84, 82, 81, 75, 48, 106, 55, 104, 117, 72, 47, 65, 120, 107, 81, 120, 68, 84, 43, 101, 70, 43, 100, 105, 120, 47, 57, 56, 52, 76, 52, 85, 106, 68, 47, 97, 66, 119, 51, 100, 98, 117, 81, 107, 51, 101, 122, 74, 43, 105, 100, 69, 85, 87, 110, 105, 49, 43, 87, 49, 66, 84, 106, 86, 109, 67, 55, 68, 88, 65, 49, 115, 68, 120, 101, 53, 103, 54, 88, 90, 52, 49, 43, 110, 105, 73, 107, 52, 73, 107, 118, 50, 67, 76, 74, 65, 43, 86, 76, 69, 69, 122, 84, 112, 83, 113, 110, 111, 74, 83, 70, 105, 82, 79, 120, 118, 71, 118, 103, 72, 49, 51, 99, 115, 90, 101, 121, 52, 84, 78, 73, 50, 89, 84, 117, 71, 116, 117, 77, 105, 47, 71, 107, 75, 87, 97, 115, 43, 72, 66, 74, 102, 70, 82, 84, 82, 72, 77, 90, 73, 110, 112, 88, 98, 101, 82, 71, 68, 117, 74, 49, 107, 121, 113, 105, 67, 103, 118, 57, 101, 72, 106, 105, 120, 67, 113, 112, 117, 73, 69, 99, 54, 84, 76, 79, 54, 83, 57, 117, 49, 112, 55, 97, 67, 102, 67, 87, 100, 84, 85, 108, 69, 66, 53, 101, 53, 100, 85, 67, 69, 76, 47, 106, 99, 109, 122, 118, 105, 88, 113, 66, 65, 52, 52, 122, 118, 70, 120, 69, 108, 105, 101, 50, 67, 104, 103, 66, 76, 122, 108, 48, 100, 65, 61, 61 },
                            UserValidationId = new Guid("6d3dd407-d5e5-41ce-a49b-599145fe89fc")
                        },
                        new
                        {
                            Id = new Guid("ef2c54d6-a131-4e5a-b757-e3ebdd67e9bc"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "matheuschielle+employee@gmail.com",
                            FireBaseCloudMessageToken = "ds4Pz40YTeazL39DToMz5P:APA91bHUoBotVr6Mi9d3EfsbgVGrHUdWfmfGslBP2hFboNcdc7MlTQRt2aE2DZTNad-0-ISU3Bk_wON4eLNJZw_pIQ5tH3lPQDJy-4XglcSH5LAufDKmqjy3K0osz7uph6oTknwHpGem",
                            Name = "Matheus",
                            Password = new byte[] { 65, 76, 109, 69, 56, 75, 74, 97, 107, 55, 89, 89, 80, 66, 49, 70, 87, 56, 106, 115, 72, 119, 99, 120, 103, 49, 103, 87, 106, 89, 98, 80, 86, 70, 111, 121, 50, 105, 82, 104, 43, 113, 111, 112, 90, 103, 112, 69, 48, 77, 90, 117, 70, 117, 87, 122, 107, 110, 56, 77, 100, 117, 53, 111, 109, 85, 112, 50, 87, 88, 116, 65, 116, 77, 54, 69, 87, 87, 120, 52, 99, 109, 82, 117, 99, 74, 102, 47, 111, 84, 82, 81, 75, 48, 106, 55, 104, 117, 72, 47, 65, 120, 107, 81, 120, 68, 84, 43, 101, 70, 43, 100, 105, 120, 47, 57, 56, 52, 76, 52, 85, 106, 68, 47, 97, 66, 119, 51, 100, 98, 117, 81, 107, 51, 101, 122, 74, 43, 105, 100, 69, 85, 87, 110, 105, 49, 43, 87, 49, 66, 84, 106, 86, 109, 67, 55, 68, 88, 65, 49, 115, 68, 120, 101, 53, 103, 54, 88, 90, 52, 49, 43, 110, 105, 73, 107, 52, 73, 107, 118, 50, 67, 76, 74, 65, 43, 86, 76, 69, 69, 122, 84, 112, 83, 113, 110, 111, 74, 83, 70, 105, 82, 79, 120, 118, 71, 118, 103, 72, 49, 51, 99, 115, 90, 101, 121, 52, 84, 78, 73, 50, 89, 84, 117, 71, 116, 117, 77, 105, 47, 71, 107, 75, 87, 97, 115, 43, 72, 66, 74, 102, 70, 82, 84, 82, 72, 77, 90, 73, 110, 112, 88, 98, 101, 82, 71, 68, 117, 74, 49, 107, 121, 113, 105, 67, 103, 118, 57, 101, 72, 106, 105, 120, 67, 113, 112, 117, 73, 69, 99, 54, 84, 76, 79, 54, 83, 57, 117, 49, 112, 55, 97, 67, 102, 67, 87, 100, 84, 85, 108, 69, 66, 53, 101, 53, 100, 85, 67, 69, 76, 47, 106, 99, 109, 122, 118, 105, 88, 113, 66, 65, 52, 52, 122, 118, 70, 120, 69, 108, 105, 101, 50, 67, 104, 103, 66, 76, 122, 108, 48, 100, 65, 61, 61 },
                            UserValidationId = new Guid("6d3dd407-d5e5-41ce-a49b-599145fe89fa")
                        });
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ef2c54d6-a131-4e5a-b757-e3ebdd67e9bd"),
                            RoleId = new Guid("e589a9e9-1ba9-46e8-8487-ec68b2f9ef76")
                        },
                        new
                        {
                            UserId = new Guid("ef2c54d6-a131-4e5a-b757-e3ebdd67e9be"),
                            RoleId = new Guid("574ac0d0-2e84-44d7-8949-a8169fa3bbff")
                        },
                        new
                        {
                            UserId = new Guid("ef2c54d6-a131-4e5a-b757-e3ebdd67e9bc"),
                            RoleId = new Guid("a869d27c-b75d-424b-a2d6-c91e273d631b")
                        });
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.UserValidation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<bool>("EmailValidated")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumberConfirmationCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<bool>("PhoneNumberValidated")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("UserValidations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9961144-2f1e-41c4-b96c-79e62c20b21b"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmailValidated = true,
                            PhoneNumberValidated = true
                        },
                        new
                        {
                            Id = new Guid("6d3dd407-d5e5-41ce-a49b-599145fe89fc"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmailValidated = true,
                            PhoneNumberValidated = true
                        },
                        new
                        {
                            Id = new Guid("6d3dd407-d5e5-41ce-a49b-599145fe89fa"),
                            CreationDate = new DateTime(2021, 11, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmailValidated = true,
                            PhoneNumberValidated = true
                        });
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Employee", b =>
                {
                    b.HasOne("AslaveCare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Manager", b =>
                {
                    b.HasOne("AslaveCare.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterIn", b =>
                {
                    b.HasOne("AslaveCare.Domain.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterInStock", b =>
                {
                    b.HasOne("AslaveCare.Domain.Entities.RegisterIn", "RegisterIn")
                        .WithMany("RegisterInStocks")
                        .HasForeignKey("RegisterInId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AslaveCare.Domain.Entities.Stock", "Stock")
                        .WithMany("RegisterInStocks")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RegisterIn");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterOutStock", b =>
                {
                    b.HasOne("AslaveCare.Domain.Entities.RegisterOut", "RegisterOut")
                        .WithMany("RegisterOutStocks")
                        .HasForeignKey("RegisterOutId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AslaveCare.Domain.Entities.Stock", "Stock")
                        .WithMany("RegisterOutStocks")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RegisterOut");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Stock", b =>
                {
                    b.HasOne("AslaveCare.Domain.Entities.StockType", null)
                        .WithMany("Stocks")
                        .HasForeignKey("StockTypeId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.User", b =>
                {
                    b.HasOne("AslaveCare.Domain.Entities.UserValidation", "UserValidation")
                        .WithMany()
                        .HasForeignKey("UserValidationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserValidation");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("AslaveCare.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AslaveCare.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterIn", b =>
                {
                    b.Navigation("RegisterInStocks");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.RegisterOut", b =>
                {
                    b.Navigation("RegisterOutStocks");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.Stock", b =>
                {
                    b.Navigation("RegisterInStocks");

                    b.Navigation("RegisterOutStocks");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.StockType", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("AslaveCare.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
