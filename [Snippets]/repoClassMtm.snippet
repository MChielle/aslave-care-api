<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>repoClassMtm</Title>
			<Shortcut>repoClassMtm</Shortcut>
			<Description>Code snippet to create an implementation of an entity repository many to many</Description>
			<Author>Matheus Chielle</Author>
		</Header>
		<Snippet>
			<Declarations>
				<Literal Editable="true">
					<ID>Entity</ID>
					<ToolTip>Entity name</ToolTip>
					<Default>Entity</Default>
					<Function>
					</Function>
				</Literal>
				<Literal Editable="true">
					<ID>Context</ID>
					<ToolTip>Name of the context</ToolTip>
					<Default>Context</Default>
					<Function>
					</Function>
				</Literal>
				<Literal Editable="true">
					<ID>Key</ID>
					<ToolTip>Entity key type</ToolTip>
					<Default>Key</Default>
					<Function>
					</Function>
				</Literal>
				<Literal Editable="true">
					<ID>Project</ID>
					<ToolTip>Project name</ToolTip>
					<Default>Project</Default>
					<Function>
					</Function>
				</Literal>
				<Literal Editable="true">
					<ID>Version</ID>
					<ToolTip>Version number</ToolTip>
					<Default>Version</Default>
					<Function>
					</Function>
				</Literal>
				<Literal Editable="true">
					<ID>Strong</ID>
					<ToolTip>Strong Entity</ToolTip>
					<Default>Strong</Default>
					<Function>
					</Function>
				</Literal>
				<Literal Editable="true">
					<ID>Weak</ID>
					<ToolTip>Weak Entity</ToolTip>
					<Default>Weak</Default>
					<Function>
					</Function>
				</Literal>
			</Declarations>
			<Code Language="csharp">
				<![CDATA[using $Project$.Infra.Data.Context.RepositoryContext;
using $Project$.Infra.Data.Context;
using $Project$.Infra.Data.Repositories.Core;
using System;
using $Project$.Domain.Entities;
using $Project$.Domain.Interfaces.Repositories.v$Version$;
using System.Threading.Tasks;
using System.Threading;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace $Project$.Infra.Data.Repositories.v$Version$
{
    public class $Entity$Repository : MtMRepositoryBase<$Context$Context, $Entity$, $Key$, $Key$>, I$Entity$Repository
    {
        public $Entity$Repository($Context$Context context, IRepositoryContext repositoryContext)
            : base(context, repositoryContext)
        {
        }

        public async override Task<$Entity$> GetByIdsAsync($Key$ $Strong$Id, $Key$ $Weak$Id, CancellationToken cancellationToken = default)
        {
            return await _context.$Entity$s
                .Where(x => x.$Strong$Id.Equals($Strong$Id) && x.$Weak$Id.Equals($Weak$Id))
                .AsNoTracking()
                .FirstOrDefaultAsync(cancellationToken);
        }

        public override async Task<IEnumerable<$Entity$>> GetByStrongIdAsync($Key$ $Strong$Id, CancellationToken cancellationToken = default)
        {
            return await _context.$Entity$s
                .Include(x => x.$Weak$)
                .Where(x => x.$Strong$Id == $Strong$Id)
                .AsNoTracking()
                .ToListAsync(cancellationToken);
        }

        public override async Task<IEnumerable<$Entity$>> GetByWeakIdAsync($Key$ $Weak$Id, CancellationToken cancellationToken = default)
        {
            return await _context.$Entity$s
                .Include(x => x.$Strong$)
                .Where(x => x.$Weak$Id == $Weak$Id)
                .AsNoTracking()
                .ToListAsync(cancellationToken);
        }

        public override async Task<IEnumerable<$Entity$>> UpdateAsync(IEnumerable<$Entity$> entitiesMtM)
        {
            foreach (var entityMtM in entitiesMtM)
            {
                var entity = _context.Set<$Entity$>().Find(entityMtM.$Strong$Id, entityMtM.$Weak$Id);
                if (entity == default) return null;
                var attachedEntry = _context.Entry(entity);
                attachedEntry.CurrentValues.SetValues(entityMtM);
            }
            await _context.SaveChangesAsync();
            return entitiesMtM;
        }
    }
}$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>